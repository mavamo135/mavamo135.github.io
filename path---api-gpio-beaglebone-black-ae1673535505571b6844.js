webpackJsonp([56193270255838],{379:function(n,s){n.exports={data:{site:{siteMetadata:{title:"MyBlog"}},markdownRemark:{html:'<p><a href="https://github.com/mavamo135/gpio_api">Repositorio del código</a></p>\n<p>En este post vamos a hacer una API usando Javascript para controlar los LEDs\nde la Beaglebone Black.</p>\n<p>Primero, requerimos los módulos necesarios para crear el servidor y para accesar\na los GPIOs:</p>\n<div class="gatsby-highlight" data-language="javascript"><pre style="counter-reset: linenumber 0" class="language-javascript line-numbers"><code class="language-javascript">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node\n<span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bonescript\'</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'url\'</span><span class="token punctuation">)</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>La librería <code class="language-text">http</code> se utiliza para crear un servidor. La librería <code class="language-text">bonescript</code>\nes utilizada para controlar el estado de los LEDs. La librería <code class="language-text">url</code> se utiliza\npara obtener los parámetros de las peticiones de los clientes</p>\n<p>Primero, se inicializan los GPIOs de los LEDs como salidas y escribimos un valor\nde LOW:</p>\n<div class="gatsby-highlight" data-language="javascript"><pre style="counter-reset: linenumber 0" class="language-javascript line-numbers"><code class="language-javascript"><span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">.</span><span class="token constant">LOW</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token constant">LOW</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token constant">LOW</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token constant">LOW</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> leds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"USR0"</span><span class="token punctuation">,</span> <span class="token string">"USR1"</span><span class="token punctuation">,</span> <span class="token string">"USR2"</span><span class="token punctuation">,</span> <span class="token string">"USR3"</span><span class="token punctuation">]</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> leds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    b<span class="token punctuation">.</span><span class="token function">pinMode</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token constant">OUTPUT</span><span class="token punctuation">)</span>\n    b<span class="token punctuation">.</span><span class="token function">digitalWrite</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>El siguiente código crea un servidor y define la funciones que va a manejar las\nconexiones, también, indica al servidor que abra el puerto 3001 para conexiones\ncon el cliente. Cuando un cliente se conecta se obtiene la ruta de la petición\nen la variable <code class="language-text">urlReq</code> que indica cuál LED se quiere operar y la consulta en\nla variable <code class="language-text">query</code> que tiene el dato <code class="language-text">state</code> que indica el estado del LED que\nse va a operar.</p>\n<div class="gatsby-highlight" data-language="javascript"><pre style="counter-reset: linenumber 0" class="language-javascript line-numbers"><code class="language-javascript">http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> urlReq <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pathname\n    <span class="token keyword">var</span> query <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>query\n    <span class="token keyword">switch</span><span class="token punctuation">(</span>urlReq<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token string">\'/USR0\'</span><span class="token punctuation">:</span>\n            res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">\'Content-Type\'</span><span class="token punctuation">:</span> <span class="token string">\'text/html\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token comment">// Set state received from query</span>\n            <span class="token keyword">break</span>\n        <span class="token keyword">case</span> <span class="token string">\'/USR1\'</span><span class="token punctuation">:</span>\n            res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">\'Content-Type\'</span><span class="token punctuation">:</span> <span class="token string">\'text/html\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token comment">// Set state received from query</span>\n            <span class="token keyword">break</span>\n        <span class="token keyword">case</span> <span class="token string">\'/USR2\'</span><span class="token punctuation">:</span>\n            res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">\'Content-Type\'</span><span class="token punctuation">:</span> <span class="token string">\'text/html\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// Toggle the LED USR2</span>\n            <span class="token keyword">break</span>\n        <span class="token keyword">default</span><span class="token punctuation">:</span>\n            res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">\'Content-Type\'</span><span class="token punctuation">:</span> <span class="token string">\'text/html\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n            res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">\' Not Found!\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">)</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Definimos las funciones para escribir a los GPIOs y creamos una función\nperiódica de 1 segundo para saber que nuestro programa está corriendo.</p>\n<div class="gatsby-highlight" data-language="javascript"><pre style="counter-reset: linenumber 0" class="language-javascript line-numbers"><code class="language-javascript"><span class="token function">setInterval</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Function used to toggle a LED state</span>\n<span class="token keyword">function</span> <span class="token function">toggle</span><span class="token punctuation">(</span>led<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">[</span>led<span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span>led<span class="token punctuation">]</span> <span class="token operator">==</span> Gpio<span class="token punctuation">.</span><span class="token constant">LOW</span> <span class="token operator">?</span> Gpio<span class="token punctuation">.</span><span class="token constant">HIGH</span> <span class="token punctuation">:</span> Gpio<span class="token punctuation">.</span><span class="token constant">LOW</span>\n    Gpio<span class="token punctuation">.</span><span class="token function">digitalWrite</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>led<span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">[</span>led<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Function used to set a value to a LED</span>\n<span class="token keyword">function</span> <span class="token function">setState</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">[</span>led<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> Gpio<span class="token punctuation">.</span><span class="token constant">HIGH</span> <span class="token punctuation">:</span> Gpio<span class="token punctuation">.</span><span class="token constant">LOW</span>\n    Gpio<span class="token punctuation">.</span><span class="token function">digitalWrite</span><span class="token punctuation">(</span>leds<span class="token punctuation">[</span>led<span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">[</span>led<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Para cambiar el estado de un LED se pueden utilizar los siguientes comandos:</p>\n<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># Apagar LED USR0</span>\n<span class="token function">curl</span> -v <span class="token string">"&lt;DIRECCION_IP_BEAG>:3001/USR0?state=0"</span>\n<span class="token function">curl</span> -v <span class="token string">"beaglebone.local:3001/USR0?state=0"</span>\n<span class="token comment"># Encender LED USR0</span>\n<span class="token function">curl</span> -v <span class="token string">"&lt;DIRECCION_IP_BEAG>:3001/USR0?state=0"</span>\n<span class="token function">curl</span> -v <span class="token string">"beaglebone.local:3001/USR0?state=1"</span>\n\n<span class="token comment"># Apagar LED USR1</span>\n<span class="token function">curl</span> -v <span class="token string">"&lt;DIRECCION_IP_BEAG>:3001/USR0?state=0"</span>\n<span class="token function">curl</span> -v <span class="token string">"beaglebone.local:3001/USR1?state=0"</span>\n<span class="token comment"># Encender LED USR1</span>\n<span class="token function">curl</span> -v <span class="token string">"&lt;DIRECCION_IP_BEAG>:3001/USR0?state=0"</span>\n<span class="token function">curl</span> -v <span class="token string">"beaglebone.local:3001/USR1?state=1"</span>\n\n<span class="token comment"># Invertir estado LED USR2</span>\n<span class="token function">curl</span> -v <span class="token string">"&lt;DIRECCION_IP_BEAG>:3001/USR0?state=0"</span>\n<span class="token function">curl</span> -v <span class="token string">"beaglebone.local:3001/USR2"</span></code></pre></div>\n<p>El LED USR2 está configurado para que en cada petición se invierta su estado.</p>\n<p>Si no tienes <code class="language-text">curl</code>instalado puedes hacer conexión con el servidor utilizando\nun navegador web y conectandote a la siguiente dirección\n<code class="language-text">&lt;DIRECCION_IP_BEAG&gt;:3001/USR0?1</code> o si la Beaglebone Black está conectada a tu\ncomputadora por el puerto USB puedes utilizar la siguiente dirección\n<code class="language-text">beaglebone.local:3001/USR0?1</code>.</p>',frontmatter:{title:"API GPIO en una Beaglebone Black",author:"Maximiliano Valencia",date:"04 marzo, 2018"}}},pathContext:{slug:"/api_gpio_beaglebone_black/"}}}});
//# sourceMappingURL=path---api-gpio-beaglebone-black-ae1673535505571b6844.js.map