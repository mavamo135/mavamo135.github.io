{"version":3,"sources":["webpack:///path---posts-gpio-server-beaglebone-black-d2db09a64b47b1e9affa.js","webpack:///./.cache/json/posts-gpio-server-beaglebone-black.json"],"names":["webpackJsonp","550","module","exports","data","site","siteMetadata","title","markdownRemark","html","frontmatter","author","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,WAAkBC,gBAAmBC,KAAA,w/RAAgjSC,aAAwCH,MAAA,wCAAAI,OAAA,uBAAAC,KAAA,oBAA0GC,aAAgBC,KAAA","file":"path---posts-gpio-server-beaglebone-black-d2db09a64b47b1e9affa.js","sourcesContent":["webpackJsonp([83783013029165],{\n\n/***/ 550:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"MyBlog\"}},\"markdownRemark\":{\"html\":\"<p>En este post vamos a hacer un servidor utilizando Javascript para controlar\\nlos LEDs de la Beaglebone Black. El post está dividido en programación del\\nservidor y del cliente.</p>\\n<h2>Servidor</h2>\\n<p>Primero, requerimos los módulos necesarios para crear el servidor y para accesar\\na los GPIOs:</p>\\n<pre><code class=\\\"language-Javascript\\\">    #!/usr/bin/env node\\n    var http = require('http').createServer(handler)//require http server, and create server with function handler()\\n    var fs = require('fs')                          //require filesystem module\\n    var io = require('socket.io')(http)             //require socket.io module and pass the http object (server)\\n    var Gpio = require('bonescript')                //include onoff to interact with the GPIO\\n</code></pre>\\n<p>Inicializamos los GPIOs de los LEDs como salidas y escribimos un valor de LOW:</p>\\n<pre><code class=\\\"language-Javascript\\\">    var state = [Gpio.LOW, Gpio.LOW, Gpio.LOW, Gpio.LOW]\\n    var leds = [\\\"USR0\\\", \\\"USR1\\\", \\\"USR2\\\", \\\"USR3\\\"]\\n    for (var i in leds) {\\n        b.pinMode(leds[i], b.OUTPUT)\\n        b.digitalWrite(leds[i], state[i])\\n    }\\n</code></pre>\\n<p>Creamos el servidor con el módulo http y definimos la función para manejar las\\nconexiones al servidor:</p>\\n<pre><code class=\\\"language-Javascript\\\">    http.listen(3002); //listen to port 3002\\n    function handler (req, res) { //create server handler function\\n        fs.readFile(__dirname + '/public/index.html', function(err, data) { //read file index.html in public folder\\n            if (err) {\\n                res.writeHead(404, {'Content-Type': 'text/html'}) //display 404 on error\\n                return res.end(\\\"404 Not Found\\\")\\n            }\\n            res.writeHead(200, {'Content-Type': 'text/html'}) //write HTML\\n            res.write(data) //write data from index.html\\n            return res.end()\\n        })\\n    }\\n</code></pre>\\n<p>Definimos la función que va a manejar los mensajes entre el cliente y el servidor:</p>\\n<pre><code class=\\\"language-Javascript\\\">    io.sockets.on('connection', function (socket) {// WebSocket Connection, connection from client\\n        socket.emit('led1', state[0]); //send led0 status to client\\n        socket.emit('led2', state[1]); //send led1 status to client\\n        socket.emit('led3', state[2]); //send led2 status to client\\n        socket.emit('led4', state[3]); //send led3 status to client\\n        socket.on('led1', function(data) { //get light switch status from client\\n            setLed(0, data)\\n        })\\n        socket.on('led2', function(data) { //get light switch status from client\\n            setLed(1, data)\\n        })\\n        socket.on('led3', function(data) { //get light switch status from client\\n            setLed(2, data)\\n        })\\n        socket.on('led4', function(data) { //get light switch status from client\\n            setLed(3, data)\\n        })\\n    })\\n\\n    function setLed(led, value) {\\n        if (value == 1) state[led] = Gpio.HIGH\\n        else state[led] = Gpio.LOW\\n        Gpio.digitalWrite(leds[led], state[led])\\n    }\\n</code></pre>\\n<p>Finalmente, definimos la función que va a manejar el comando de paro del programa\\ndel usuario (CTRL+C): </p>\\n<pre><code class=\\\"language-Javascript\\\">    process.on('SIGINT', function () { //on ctrl+c\\n        Gpio.digitalWrite(leds[0], Gpio.LOW) // Turn LED off\\n        Gpio.digitalWrite(leds[1], Gpio.LOW) // Turn LED off\\n        Gpio.digitalWrite(leds[2], Gpio.LOW) // Turn LED off\\n        Gpio.digitalWrite(leds[3], Gpio.LOW) // Turn LED off\\n        process.exit() //exit completely\\n    })\\n</code></pre>\\n<h2>Cliente</h2>\\n<p>El archivo HTML que será enviado al cliente es el siguiente:</p>\\n<pre><code class=\\\"language-HTML\\\">    &#x3C;!DOCTYPE html>\\n    &#x3C;html>\\n        &#x3C;head>\\n            \\n        &#x3C;/head>\\n        &#x3C;body>\\n            &#x3C;h1>Control LED light&#x3C;/h1>\\n            &#x3C;p>USR0 \\n                &#x3C;label class=\\\"switch\\\">\\n                    &#x3C;input type=\\\"checkbox\\\" id=\\\"led1\\\">\\n                    &#x3C;span class=\\\"slider round\\\">&#x3C;/span>\\n                &#x3C;/label>\\n            &#x3C;/p>\\n            &#x3C;p>USR1 \\n                &#x3C;label class=\\\"switch\\\">\\n                    &#x3C;input type=\\\"checkbox\\\" id=\\\"led2\\\">\\n                    &#x3C;span class=\\\"slider round\\\">&#x3C;/span>\\n                &#x3C;/label>\\n            &#x3C;/p>\\n            &#x3C;p>USR2 \\n                &#x3C;label class=\\\"switch\\\">\\n                    &#x3C;input type=\\\"checkbox\\\" id=\\\"led3\\\">\\n                    &#x3C;span class=\\\"slider round\\\">&#x3C;/span>\\n                &#x3C;/label>\\n            &#x3C;/p>\\n            &#x3C;p>USR3 \\n                &#x3C;label class=\\\"switch\\\">\\n                    &#x3C;input type=\\\"checkbox\\\" id=\\\"led4\\\">\\n                    &#x3C;span class=\\\"slider round\\\">&#x3C;/span>\\n                &#x3C;/label>\\n            &#x3C;/p>\\n        &#x3C;/body>\\n    &#x3C;/html> \\n</code></pre>\\n<p>Los estilos de los elementos están definidos dentro de la etiqueta <code>&#x3C;head></code>:</p>\\n<pre><code class=\\\"language-HTML\\\">    &#x3C;style>\\n        .switch {\\n            position: relative;\\n            display: inline-block;\\n            width: 60px;\\n            height: 34px;\\n        }\\n        .switch input {display:none;}\\n        .slider {\\n            position: absolute;\\n            cursor: pointer;\\n            top: 0;\\n            left: 0;\\n            right: 0;\\n            bottom: 0;\\n            background-color: #ccc;\\n            -webkit-transition: .4s;\\n            transition: .4s;\\n        }\\n        .slider:before {\\n            position: absolute;\\n            content: \\\"\\\";\\n            height: 26px;\\n            width: 26px;\\n            left: 4px;\\n            bottom: 4px;\\n            background-color: white;\\n            -webkit-transition: .4s;\\n            transition: .4s;\\n        }\\n        input:checked + .slider {\\n            background-color: #2196F3;\\n        }\\n        input:focus + .slider {\\n            box-shadow: 0 0 1px #2196F3;\\n        }\\n        input:checked + .slider:before {\\n            -webkit-transform: translateX(26px);\\n            -ms-transform: translateX(26px);\\n            transform: translateX(26px);\\n        }\\n        /* Rounded sliders */\\n        .slider.round {\\n            border-radius: 34px;\\n        }\\n        .slider.round:before {\\n            border-radius: 50%;\\n        }\\n    &#x3C;/style>\\n</code></pre>\\n<p>Finalmente, definimos las etiquetas <code>&#x3C;script></code> dentro de la etiqueta <code>&#x3C;head></code>:</p>\\n<pre><code class=\\\"language-HTML\\\">    &#x3C;script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\\\">&#x3C;/script> &#x3C;!-- include socket.io client side script -->\\n    &#x3C;script>\\n        var socket = io(); //load socket.io-client and connect to the host that serves the page\\n        window.addEventListener(\\\"load\\\", function(){ //when page loads\\n            var led1CB = document.getElementById(\\\"led1\\\")\\n            led1CB.addEventListener(\\\"change\\\", function() { //add event listener for when checkbox changes\\n              socket.emit(\\\"led1\\\", Number(this.checked)) //send button status to server (as 1 or 0)\\n            })\\n            var led2CB = document.getElementById(\\\"led2\\\")\\n            led2CB.addEventListener(\\\"change\\\", function() { //add event listener for when checkbox changes\\n              socket.emit(\\\"led2\\\", Number(this.checked)) //send button status to server (as 1 or 0)\\n            })\\n            var led3CB = document.getElementById(\\\"led3\\\")\\n            led3CB.addEventListener(\\\"change\\\", function() { //add event listener for when checkbox changes\\n              socket.emit(\\\"led3\\\", Number(this.checked)) //send button status to server (as 1 or 0)\\n            })\\n            var led4CB = document.getElementById(\\\"led4\\\")\\n            led4CB.addEventListener(\\\"change\\\", function() { //add event listener for when checkbox changes\\n              socket.emit(\\\"led4\\\", Number(this.checked)) //send button status to server (as 1 or 0)\\n            })\\n        })\\n        socket.on(\\\"led1\\\", function (data) { //get button status from client\\n            console.log(\\\"led1: \\\" + data)\\n            document.getElementById(\\\"led1\\\").checked = data; //change checkbox according to push button on Raspberry Pi\\n        })\\n        socket.on(\\\"led2\\\", function (data) { //get button status from client\\n            console.log(\\\"led2: \\\" + data)\\n            document.getElementById(\\\"led2\\\").checked = data; //change checkbox according to push button on Raspberry Pi\\n        })\\n        socket.on(\\\"led3\\\", function (data) { //get button status from client\\n            console.log(\\\"led3: \\\" + data)\\n            document.getElementById(\\\"led3\\\").checked = data; //change checkbox according to push button on Raspberry Pi\\n        })\\n        socket.on(\\\"led4\\\", function (data) { //get button status from client\\n            console.log(\\\"led4: \\\" + data)\\n            document.getElementById(\\\"led4\\\").checked = data; //change checkbox according to push button on Raspberry Pi\\n        })\\n    &#x3C;/script>\\n</code></pre>\",\"frontmatter\":{\"title\":\"Servidor GPIO en una Beaglebone Black\",\"author\":\"Maximiliano Valencia\",\"date\":\"16 March, 2018\"}}},\"pathContext\":{\"slug\":\"/posts/gpio_server_beaglebone_black/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-gpio-server-beaglebone-black-d2db09a64b47b1e9affa.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"MyBlog\"}},\"markdownRemark\":{\"html\":\"<p>En este post vamos a hacer un servidor utilizando Javascript para controlar\\nlos LEDs de la Beaglebone Black. El post está dividido en programación del\\nservidor y del cliente.</p>\\n<h2>Servidor</h2>\\n<p>Primero, requerimos los módulos necesarios para crear el servidor y para accesar\\na los GPIOs:</p>\\n<pre><code class=\\\"language-Javascript\\\">    #!/usr/bin/env node\\n    var http = require('http').createServer(handler)//require http server, and create server with function handler()\\n    var fs = require('fs')                          //require filesystem module\\n    var io = require('socket.io')(http)             //require socket.io module and pass the http object (server)\\n    var Gpio = require('bonescript')                //include onoff to interact with the GPIO\\n</code></pre>\\n<p>Inicializamos los GPIOs de los LEDs como salidas y escribimos un valor de LOW:</p>\\n<pre><code class=\\\"language-Javascript\\\">    var state = [Gpio.LOW, Gpio.LOW, Gpio.LOW, Gpio.LOW]\\n    var leds = [\\\"USR0\\\", \\\"USR1\\\", \\\"USR2\\\", \\\"USR3\\\"]\\n    for (var i in leds) {\\n        b.pinMode(leds[i], b.OUTPUT)\\n        b.digitalWrite(leds[i], state[i])\\n    }\\n</code></pre>\\n<p>Creamos el servidor con el módulo http y definimos la función para manejar las\\nconexiones al servidor:</p>\\n<pre><code class=\\\"language-Javascript\\\">    http.listen(3002); //listen to port 3002\\n    function handler (req, res) { //create server handler function\\n        fs.readFile(__dirname + '/public/index.html', function(err, data) { //read file index.html in public folder\\n            if (err) {\\n                res.writeHead(404, {'Content-Type': 'text/html'}) //display 404 on error\\n                return res.end(\\\"404 Not Found\\\")\\n            }\\n            res.writeHead(200, {'Content-Type': 'text/html'}) //write HTML\\n            res.write(data) //write data from index.html\\n            return res.end()\\n        })\\n    }\\n</code></pre>\\n<p>Definimos la función que va a manejar los mensajes entre el cliente y el servidor:</p>\\n<pre><code class=\\\"language-Javascript\\\">    io.sockets.on('connection', function (socket) {// WebSocket Connection, connection from client\\n        socket.emit('led1', state[0]); //send led0 status to client\\n        socket.emit('led2', state[1]); //send led1 status to client\\n        socket.emit('led3', state[2]); //send led2 status to client\\n        socket.emit('led4', state[3]); //send led3 status to client\\n        socket.on('led1', function(data) { //get light switch status from client\\n            setLed(0, data)\\n        })\\n        socket.on('led2', function(data) { //get light switch status from client\\n            setLed(1, data)\\n        })\\n        socket.on('led3', function(data) { //get light switch status from client\\n            setLed(2, data)\\n        })\\n        socket.on('led4', function(data) { //get light switch status from client\\n            setLed(3, data)\\n        })\\n    })\\n\\n    function setLed(led, value) {\\n        if (value == 1) state[led] = Gpio.HIGH\\n        else state[led] = Gpio.LOW\\n        Gpio.digitalWrite(leds[led], state[led])\\n    }\\n</code></pre>\\n<p>Finalmente, definimos la función que va a manejar el comando de paro del programa\\ndel usuario (CTRL+C): </p>\\n<pre><code class=\\\"language-Javascript\\\">    process.on('SIGINT', function () { //on ctrl+c\\n        Gpio.digitalWrite(leds[0], Gpio.LOW) // Turn LED off\\n        Gpio.digitalWrite(leds[1], Gpio.LOW) // Turn LED off\\n        Gpio.digitalWrite(leds[2], Gpio.LOW) // Turn LED off\\n        Gpio.digitalWrite(leds[3], Gpio.LOW) // Turn LED off\\n        process.exit() //exit completely\\n    })\\n</code></pre>\\n<h2>Cliente</h2>\\n<p>El archivo HTML que será enviado al cliente es el siguiente:</p>\\n<pre><code class=\\\"language-HTML\\\">    &#x3C;!DOCTYPE html>\\n    &#x3C;html>\\n        &#x3C;head>\\n            \\n        &#x3C;/head>\\n        &#x3C;body>\\n            &#x3C;h1>Control LED light&#x3C;/h1>\\n            &#x3C;p>USR0 \\n                &#x3C;label class=\\\"switch\\\">\\n                    &#x3C;input type=\\\"checkbox\\\" id=\\\"led1\\\">\\n                    &#x3C;span class=\\\"slider round\\\">&#x3C;/span>\\n                &#x3C;/label>\\n            &#x3C;/p>\\n            &#x3C;p>USR1 \\n                &#x3C;label class=\\\"switch\\\">\\n                    &#x3C;input type=\\\"checkbox\\\" id=\\\"led2\\\">\\n                    &#x3C;span class=\\\"slider round\\\">&#x3C;/span>\\n                &#x3C;/label>\\n            &#x3C;/p>\\n            &#x3C;p>USR2 \\n                &#x3C;label class=\\\"switch\\\">\\n                    &#x3C;input type=\\\"checkbox\\\" id=\\\"led3\\\">\\n                    &#x3C;span class=\\\"slider round\\\">&#x3C;/span>\\n                &#x3C;/label>\\n            &#x3C;/p>\\n            &#x3C;p>USR3 \\n                &#x3C;label class=\\\"switch\\\">\\n                    &#x3C;input type=\\\"checkbox\\\" id=\\\"led4\\\">\\n                    &#x3C;span class=\\\"slider round\\\">&#x3C;/span>\\n                &#x3C;/label>\\n            &#x3C;/p>\\n        &#x3C;/body>\\n    &#x3C;/html> \\n</code></pre>\\n<p>Los estilos de los elementos están definidos dentro de la etiqueta <code>&#x3C;head></code>:</p>\\n<pre><code class=\\\"language-HTML\\\">    &#x3C;style>\\n        .switch {\\n            position: relative;\\n            display: inline-block;\\n            width: 60px;\\n            height: 34px;\\n        }\\n        .switch input {display:none;}\\n        .slider {\\n            position: absolute;\\n            cursor: pointer;\\n            top: 0;\\n            left: 0;\\n            right: 0;\\n            bottom: 0;\\n            background-color: #ccc;\\n            -webkit-transition: .4s;\\n            transition: .4s;\\n        }\\n        .slider:before {\\n            position: absolute;\\n            content: \\\"\\\";\\n            height: 26px;\\n            width: 26px;\\n            left: 4px;\\n            bottom: 4px;\\n            background-color: white;\\n            -webkit-transition: .4s;\\n            transition: .4s;\\n        }\\n        input:checked + .slider {\\n            background-color: #2196F3;\\n        }\\n        input:focus + .slider {\\n            box-shadow: 0 0 1px #2196F3;\\n        }\\n        input:checked + .slider:before {\\n            -webkit-transform: translateX(26px);\\n            -ms-transform: translateX(26px);\\n            transform: translateX(26px);\\n        }\\n        /* Rounded sliders */\\n        .slider.round {\\n            border-radius: 34px;\\n        }\\n        .slider.round:before {\\n            border-radius: 50%;\\n        }\\n    &#x3C;/style>\\n</code></pre>\\n<p>Finalmente, definimos las etiquetas <code>&#x3C;script></code> dentro de la etiqueta <code>&#x3C;head></code>:</p>\\n<pre><code class=\\\"language-HTML\\\">    &#x3C;script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\\\">&#x3C;/script> &#x3C;!-- include socket.io client side script -->\\n    &#x3C;script>\\n        var socket = io(); //load socket.io-client and connect to the host that serves the page\\n        window.addEventListener(\\\"load\\\", function(){ //when page loads\\n            var led1CB = document.getElementById(\\\"led1\\\")\\n            led1CB.addEventListener(\\\"change\\\", function() { //add event listener for when checkbox changes\\n              socket.emit(\\\"led1\\\", Number(this.checked)) //send button status to server (as 1 or 0)\\n            })\\n            var led2CB = document.getElementById(\\\"led2\\\")\\n            led2CB.addEventListener(\\\"change\\\", function() { //add event listener for when checkbox changes\\n              socket.emit(\\\"led2\\\", Number(this.checked)) //send button status to server (as 1 or 0)\\n            })\\n            var led3CB = document.getElementById(\\\"led3\\\")\\n            led3CB.addEventListener(\\\"change\\\", function() { //add event listener for when checkbox changes\\n              socket.emit(\\\"led3\\\", Number(this.checked)) //send button status to server (as 1 or 0)\\n            })\\n            var led4CB = document.getElementById(\\\"led4\\\")\\n            led4CB.addEventListener(\\\"change\\\", function() { //add event listener for when checkbox changes\\n              socket.emit(\\\"led4\\\", Number(this.checked)) //send button status to server (as 1 or 0)\\n            })\\n        })\\n        socket.on(\\\"led1\\\", function (data) { //get button status from client\\n            console.log(\\\"led1: \\\" + data)\\n            document.getElementById(\\\"led1\\\").checked = data; //change checkbox according to push button on Raspberry Pi\\n        })\\n        socket.on(\\\"led2\\\", function (data) { //get button status from client\\n            console.log(\\\"led2: \\\" + data)\\n            document.getElementById(\\\"led2\\\").checked = data; //change checkbox according to push button on Raspberry Pi\\n        })\\n        socket.on(\\\"led3\\\", function (data) { //get button status from client\\n            console.log(\\\"led3: \\\" + data)\\n            document.getElementById(\\\"led3\\\").checked = data; //change checkbox according to push button on Raspberry Pi\\n        })\\n        socket.on(\\\"led4\\\", function (data) { //get button status from client\\n            console.log(\\\"led4: \\\" + data)\\n            document.getElementById(\\\"led4\\\").checked = data; //change checkbox according to push button on Raspberry Pi\\n        })\\n    &#x3C;/script>\\n</code></pre>\",\"frontmatter\":{\"title\":\"Servidor GPIO en una Beaglebone Black\",\"author\":\"Maximiliano Valencia\",\"date\":\"16 March, 2018\"}}},\"pathContext\":{\"slug\":\"/posts/gpio_server_beaglebone_black/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-gpio-server-beaglebone-black.json\n// module id = 550\n// module chunks = 83783013029165"],"sourceRoot":""}