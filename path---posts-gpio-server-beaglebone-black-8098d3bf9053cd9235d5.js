webpackJsonp([83783013029165],{555:function(e,n){e.exports={data:{site:{siteMetadata:{title:"MyBlog"}},markdownRemark:{html:'<h1>Making a GPIO server with a Beaglebone Black</h1>\n<p>In this post we will build a GPIO server using Javascript to control the Beaglebone Black on-board LEDs.\nI will divide the post in server side and client side programming.</p>\n<h2>Server</h2>\n<pre><code class="language-Javascript">    #!/usr/bin/env node\n    var http = require(\'http\').createServer(handler)//require http server, and create server with function handler()\n    var fs = require(\'fs\')                          //require filesystem module\n    var io = require(\'socket.io\')(http)             //require socket.io module and pass the http object (server)\n    var Gpio = require(\'bonescript\')                //include onoff to interact with the GPIO\n</code></pre>\n<p>Initialize the GPIO of LEDs as outputs and set the value to low:</p>\n<pre><code class="language-Javascript">    var state = [Gpio.LOW, Gpio.LOW, Gpio.LOW, Gpio.LOW]\n    var leds = ["USR0", "USR1", "USR2", "USR3"]\n    for (var i in leds) {\n        b.pinMode(leds[i], b.OUTPUT)\n        b.digitalWrite(leds[i], state[i])\n    }\n</code></pre>\n<p>Next, we will create our server with http and define the function handler:</p>\n<pre><code class="language-Javascript">    http.listen(3002); //listen to port 3002\n    function handler (req, res) { //create server handler function\n        fs.readFile(__dirname + \'/public/index.html\', function(err, data) { //read file index.html in public folder\n            if (err) {\n                res.writeHead(404, {\'Content-Type\': \'text/html\'}) //display 404 on error\n                return res.end("404 Not Found")\n            }\n            res.writeHead(200, {\'Content-Type\': \'text/html\'}) //write HTML\n            res.write(data) //write data from index.html\n            return res.end()\n        })\n    }\n</code></pre>\n<p>We define the function that will handle the messages between the client and server:</p>\n<pre><code class="language-Javascript">    io.sockets.on(\'connection\', function (socket) {// WebSocket Connection, connection from client\n        socket.emit(\'led1\', state[0]); //send led0status to client\n        socket.emit(\'led2\', state[1]); //send led1 status to client\n        socket.emit(\'led3\', state[2]); //send led2 status to client\n        socket.emit(\'led4\', state[3]); //send led3 status to client\n        socket.on(\'led1\', function(data) { //get light switch status from client\n            setLed(0, data)\n        })\n        socket.on(\'led2\', function(data) { //get light switch status from client\n            setLed(1, data)\n        })\n        socket.on(\'led3\', function(data) { //get light switch status from client\n            setLed(2, data)\n        })\n        socket.on(\'led4\', function(data) { //get light switch status from client\n            setLed(3, data)\n        })\n    })\n\n    function setLed(led, value) {\n        if (value == 1) state[led] = Gpio.HIGH\n        else state[led] = Gpio.LOW\n        Gpio.digitalWrite(leds[led], state[led])\n    }\n</code></pre>\n<p>Last, we define the function that will handle the user stop of the program (CTRL+C):</p>\n<pre><code class="language-Javascript">    process.on(\'SIGINT\', function () { //on ctrl+c\n        Gpio.digitalWrite(leds[0], Gpio.LOW) // Turn LED off\n        Gpio.digitalWrite(leds[1], Gpio.LOW) // Turn LED off\n        Gpio.digitalWrite(leds[2], Gpio.LOW) // Turn LED off\n        Gpio.digitalWrite(leds[3], Gpio.LOW) // Turn LED off\n        process.exit() //exit completely\n    })\n</code></pre>\n<h2>Client</h2>\n<p>The HTML file that will be received by the client is:</p>\n<pre><code class="language-HTML">    &#x3C;!DOCTYPE html>\n    &#x3C;html>\n        &#x3C;head>\n            \n        &#x3C;/head>\n        &#x3C;body>\n            &#x3C;h1>Control LED light&#x3C;/h1>\n            &#x3C;p>USR0 \n                &#x3C;label class="switch">\n                    &#x3C;input type="checkbox" id="led1">\n                    &#x3C;span class="slider round">&#x3C;/span>\n                &#x3C;/label>\n            &#x3C;/p>\n            &#x3C;p>USR1 \n                &#x3C;label class="switch">\n                    &#x3C;input type="checkbox" id="led2">\n                    &#x3C;span class="slider round">&#x3C;/span>\n                &#x3C;/label>\n            &#x3C;/p>\n            &#x3C;p>USR2 \n                &#x3C;label class="switch">\n                    &#x3C;input type="checkbox" id="led3">\n                    &#x3C;span class="slider round">&#x3C;/span>\n                &#x3C;/label>\n            &#x3C;/p>\n            &#x3C;p>USR3 \n                &#x3C;label class="switch">\n                    &#x3C;input type="checkbox" id="led4">\n                    &#x3C;span class="slider round">&#x3C;/span>\n                &#x3C;/label>\n            &#x3C;/p>\n        &#x3C;/body>\n    &#x3C;/html> \n</code></pre>\n<p>The styles are defined inside the head tags with:</p>\n<pre><code class="language-HTML">    &#x3C;style>\n        .switch {\n            position: relative;\n            display: inline-block;\n            width: 60px;\n            height: 34px;\n        }\n        .switch input {display:none;}\n        .slider {\n            position: absolute;\n            cursor: pointer;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: #ccc;\n            -webkit-transition: .4s;\n            transition: .4s;\n        }\n        .slider:before {\n            position: absolute;\n            content: "";\n            height: 26px;\n            width: 26px;\n            left: 4px;\n            bottom: 4px;\n            background-color: white;\n            -webkit-transition: .4s;\n            transition: .4s;\n        }\n        input:checked + .slider {\n            background-color: #2196F3;\n        }\n        input:focus + .slider {\n            box-shadow: 0 0 1px #2196F3;\n        }\n        input:checked + .slider:before {\n            -webkit-transform: translateX(26px);\n            -ms-transform: translateX(26px);\n            transform: translateX(26px);\n        }\n        /* Rounded sliders */\n        .slider.round {\n            border-radius: 34px;\n        }\n        .slider.round:before {\n            border-radius: 50%;\n        }\n    &#x3C;/style>\n</code></pre>\n<p>The scripts are defined inside the head tags with:</p>\n<pre><code class="language-HTML">    &#x3C;script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js">&#x3C;/script> &#x3C;!-- include socket.io client side script -->\n    &#x3C;script>\n        var socket = io(); //load socket.io-client and connect to the host that serves the page\n        window.addEventListener("load", function(){ //when page loads\n            var led1CB = document.getElementById("led1")\n            led1CB.addEventListener("change", function() { //add event listener for when checkbox changes\n              socket.emit("led1", Number(this.checked)) //send button status to server (as 1 or 0)\n            })\n            var led2CB = document.getElementById("led2")\n            led2CB.addEventListener("change", function() { //add event listener for when checkbox changes\n              socket.emit("led2", Number(this.checked)) //send button status to server (as 1 or 0)\n            })\n            var led3CB = document.getElementById("led3")\n            led3CB.addEventListener("change", function() { //add event listener for when checkbox changes\n              socket.emit("led3", Number(this.checked)) //send button status to server (as 1 or 0)\n            })\n            var led4CB = document.getElementById("led4")\n            led4CB.addEventListener("change", function() { //add event listener for when checkbox changes\n              socket.emit("led4", Number(this.checked)) //send button status to server (as 1 or 0)\n            })\n        })\n        socket.on("led1", function (data) { //get button status from client\n            console.log("led1: " + data)\n            document.getElementById("led1").checked = data; //change checkbox according to push button on Raspberry Pi\n        })\n        socket.on("led2", function (data) { //get button status from client\n            console.log("led2: " + data)\n            document.getElementById("led2").checked = data; //change checkbox according to push button on Raspberry Pi\n        })\n        socket.on("led3", function (data) { //get button status from client\n            console.log("led3: " + data)\n            document.getElementById("led3").checked = data; //change checkbox according to push button on Raspberry Pi\n        })\n        socket.on("led4", function (data) { //get button status from client\n            console.log("led4: " + data)\n            document.getElementById("led4").checked = data; //change checkbox according to push button on Raspberry Pi\n        })\n    &#x3C;/script>\n</code></pre>',frontmatter:{title:"GPIO server with Beaglebone Black",author:"Maximiliano Valencia",date:"16 March, 2018"}}},pathContext:{slug:"/posts/gpio_server_beaglebone_black/"}}}});
//# sourceMappingURL=path---posts-gpio-server-beaglebone-black-8098d3bf9053cd9235d5.js.map