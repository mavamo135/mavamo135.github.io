{"version":3,"sources":["webpack:///path---posts-gpio-api-beaglebone-black-5765be8d5e68dc150469.js","webpack:///./.cache/json/posts-gpio-api-beaglebone-black.json"],"names":["webpackJsonp","554","module","exports","data","site","siteMetadata","title","markdownRemark","html","frontmatter","author","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,WAAkBC,gBAAmBC,KAAA,ysEAA+rEC,aAAgCH,MAAA,iCAAAI,OAAA,uBAAAC,KAAA,oBAAmGC,aAAgBC,KAAA","file":"path---posts-gpio-api-beaglebone-black-5765be8d5e68dc150469.js","sourcesContent":["webpackJsonp([148070849414933],{\n\n/***/ 554:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"MyBlog\"}},\"markdownRemark\":{\"html\":\"<h1>Making a GPIO API with a Beaglebone Black</h1>\\n<p>In this post we will build a GPIO API using Javascript to control the Beaglebone Black on-board LEDs.</p>\\n<pre><code class=\\\"language-Javascript\\\">    #!/usr/bin/env node\\n    var b = require('bonescript')\\n    var http = require('http')\\n    var url = require('url')\\n</code></pre>\\n<p>Initialize the GPIO of LEDs as outputs and set the value to low:</p>\\n<pre><code class=\\\"language-Javascript\\\">    var state = [b.LOW, b.LOW, b.LOW, b.LOW]\\n    var leds = [\\\"USR0\\\", \\\"USR1\\\", \\\"USR2\\\", \\\"USR3\\\"]\\n\\n    for (var i in leds) {\\n        b.pinMode(leds[i], b.OUTPUT)\\n        b.digitalWrite(leds[i], state[i])\\n    }\\n</code></pre>\\n<p>Next, we will create our server with http:</p>\\n<pre><code class=\\\"language-Javascript\\\">    http.createServer(function (req, res) {\\n        var urlReq = url.parse(req.url, true).pathname\\n        var query = url.parse(req.url, true).query\\n        switch(urlReq) {\\n            case '/USR0':\\n                res.writeHead(200, {'Content-Type': 'text/html'})\\n                setState(0, query.state) // Set state received from query\\n                break\\n            case '/USR1':\\n                res.writeHead(200, {'Content-Type': 'text/html'})\\n                setState(1, query.state) // Set state received from query\\n                break\\n            case '/USR2':\\n                res.writeHead(200, {'Content-Type': 'text/html'})\\n                toggle(2) // Toggle the LED USR2\\n                break\\n            default:\\n                res.writeHead(404, {'Content-Type': 'text/html'})\\n                res.write(req.url + ' Not Found!')\\n        }\\n        res.end()\\n    }).listen(3001)\\n</code></pre>\\n<p>We define our functions and we create a periodic function just to know that our program is running:</p>\\n<pre><code class=\\\"language-Javascript\\\">    setInterval( () => {\\n        toggle(3)\\n    }, 1000)\\n\\n    function toggle(i) {\\n        if(state[i] == b.LOW) state[i] = b.HIGH\\n        else state[i] = b.LOW\\n        b.digitalWrite(leds[i], state[i])\\n    }\\n\\n    function setState(i, state) {\\n        if (state == 'ON') b.digitalWrite(leds[i], b.HIGH)\\n        else b.digitalWrite(leds[i], b.LOW)\\n    }\\n</code></pre>\",\"frontmatter\":{\"title\":\"GPIO API with Beaglebone Black\",\"author\":\"Maximiliano Valencia\",\"date\":\"04 March, 2018\"}}},\"pathContext\":{\"slug\":\"/posts/gpio_api_beaglebone_black/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-gpio-api-beaglebone-black-5765be8d5e68dc150469.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"MyBlog\"}},\"markdownRemark\":{\"html\":\"<h1>Making a GPIO API with a Beaglebone Black</h1>\\n<p>In this post we will build a GPIO API using Javascript to control the Beaglebone Black on-board LEDs.</p>\\n<pre><code class=\\\"language-Javascript\\\">    #!/usr/bin/env node\\n    var b = require('bonescript')\\n    var http = require('http')\\n    var url = require('url')\\n</code></pre>\\n<p>Initialize the GPIO of LEDs as outputs and set the value to low:</p>\\n<pre><code class=\\\"language-Javascript\\\">    var state = [b.LOW, b.LOW, b.LOW, b.LOW]\\n    var leds = [\\\"USR0\\\", \\\"USR1\\\", \\\"USR2\\\", \\\"USR3\\\"]\\n\\n    for (var i in leds) {\\n        b.pinMode(leds[i], b.OUTPUT)\\n        b.digitalWrite(leds[i], state[i])\\n    }\\n</code></pre>\\n<p>Next, we will create our server with http:</p>\\n<pre><code class=\\\"language-Javascript\\\">    http.createServer(function (req, res) {\\n        var urlReq = url.parse(req.url, true).pathname\\n        var query = url.parse(req.url, true).query\\n        switch(urlReq) {\\n            case '/USR0':\\n                res.writeHead(200, {'Content-Type': 'text/html'})\\n                setState(0, query.state) // Set state received from query\\n                break\\n            case '/USR1':\\n                res.writeHead(200, {'Content-Type': 'text/html'})\\n                setState(1, query.state) // Set state received from query\\n                break\\n            case '/USR2':\\n                res.writeHead(200, {'Content-Type': 'text/html'})\\n                toggle(2) // Toggle the LED USR2\\n                break\\n            default:\\n                res.writeHead(404, {'Content-Type': 'text/html'})\\n                res.write(req.url + ' Not Found!')\\n        }\\n        res.end()\\n    }).listen(3001)\\n</code></pre>\\n<p>We define our functions and we create a periodic function just to know that our program is running:</p>\\n<pre><code class=\\\"language-Javascript\\\">    setInterval( () => {\\n        toggle(3)\\n    }, 1000)\\n\\n    function toggle(i) {\\n        if(state[i] == b.LOW) state[i] = b.HIGH\\n        else state[i] = b.LOW\\n        b.digitalWrite(leds[i], state[i])\\n    }\\n\\n    function setState(i, state) {\\n        if (state == 'ON') b.digitalWrite(leds[i], b.HIGH)\\n        else b.digitalWrite(leds[i], b.LOW)\\n    }\\n</code></pre>\",\"frontmatter\":{\"title\":\"GPIO API with Beaglebone Black\",\"author\":\"Maximiliano Valencia\",\"date\":\"04 March, 2018\"}}},\"pathContext\":{\"slug\":\"/posts/gpio_api_beaglebone_black/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-gpio-api-beaglebone-black.json\n// module id = 554\n// module chunks = 148070849414933"],"sourceRoot":""}